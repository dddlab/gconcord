// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// myfunc_wrapper
void myfunc_wrapper(Eigen::Map<Eigen::MatrixXd> M, double multiplier);
RcppExport SEXP _gconcord_myfunc_wrapper(SEXP MSEXP, SEXP multiplierSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type multiplier(multiplierSEXP);
    myfunc_wrapper(M, multiplier);
    return R_NilValue;
END_RCPP
}
// qwer
double qwer(double x, double y);
RcppExport SEXP _gconcord_qwer(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(qwer(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gconcord_myfunc_wrapper", (DL_FUNC) &_gconcord_myfunc_wrapper, 2},
    {"_gconcord_qwer", (DL_FUNC) &_gconcord_qwer, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gconcord(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
